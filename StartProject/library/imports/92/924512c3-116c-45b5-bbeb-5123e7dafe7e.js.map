{"version":3,"sources":["assets\\scripts\\Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","jumpAudio","type","AudioClip","maxMoveSpeed","accel","maxBackLeftWall","maxBackRightWall","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","callback","callFunc","playJumpSound","repeatForever","sequence","audioEngine","playEffect","onKeyDown","e","keyCode","macro","KEY","left","accLeft","right","accRight","onKeyUp","onLoad","jumpAction","node","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","update","dt","Math","abs","temp","x","calcLeftRight","translate","onDestroy","off"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    // 角色的各种属性\r\n    properties: {\r\n        // 跳跃高度\r\n        jumpHeight:0,\r\n        // 跳跃持续时间\r\n        jumpDuration:0,\r\n\r\n        jumpAudio:{\r\n            default:null,\r\n            type:cc.AudioClip\r\n        },\r\n\r\n        // 最大移动速度\r\n        maxMoveSpeed:0,\r\n        // 加速度\r\n        accel:0,\r\n\r\n        // 左右的墙\r\n        maxBackLeftWall:-500,\r\n        maxBackRightWall:500,\r\n    },\r\n\r\n    // 设置跳跃动作\r\n    setJumpAction:function (){\r\n        /**\r\n         * 1、cc.moveBy，在指定的时间，移动指定的距离\r\n         *      参数一，动作完成的时间\r\n         *      参数二，v2是Vec2（表示 2D 向量和坐标），传入x+y，返回一个向量对象\r\n         *      返回值，是ActionInterval对象，是一个时间间隔动作的类，\r\n         *          用来表示这种动作在某一个时间间隔内完成\r\n         * \r\n         * moveBy设计了多态，\r\n         *      两个参数时：参数二是向量对象\r\n         *      三个参数时，参数二是x坐标，参数三是y坐标\r\n         * \r\n         *      注意：这里的x和y，是以角色动作的当前位置而言的。是一个相对位移。\r\n         * \r\n         * 所以jumpUp是构造了一个向上跳跃的动作，jumpDown是下落的动作\r\n         * \r\n         * 2、easing(cc.easeCubicActionOut())\r\n         *      easing是ActionInterval下的方法，可以让动作的执行呈现一条曲线，而不是直线。\r\n         *      动作曲线总共有24种。\r\n         *      From：https://docs.cocos.com/creator/api/zh/modules/cc.html#easecubicactionout\r\n         * \r\n         */\r\n        let jumpUp = cc\r\n            .moveBy(this.jumpDuration, cc.v2(0,this.jumpHeight))\r\n            .easing(cc.easeCubicActionOut());\r\n        let jumpDown = cc\r\n            .moveBy(this.jumpDuration, cc.v2(0,-this.jumpHeight))\r\n            .easing(cc.easeCubicActionIn());\r\n\r\n        let callback = cc.callFunc(this.playJumpSound,this);\r\n        /**\r\n         * 1、sequence，两个动作交替进行\r\n         * 2、repeatForever，动作一直执行\r\n         *      可以传入一个回调函数，回调函数会在两个动作交替的时候执行\r\n         */\r\n        return cc.repeatForever(cc.sequence(jumpUp,jumpDown,callback))\r\n    },\r\n    playJumpSound(){\r\n        cc.audioEngine.playEffect(this.jumpAudio,false);\r\n    },\r\n\r\n    // 键盘按下\r\n    onKeyDown(e){\r\n        switch(e.keyCode){\r\n            case cc.macro.KEY.left:\r\n                this.accLeft = true;\r\n                break;\r\n            case cc.macro.KEY.right:\r\n                this.accRight = true;\r\n                break;\r\n        }\r\n    },\r\n    // 键盘弹起\r\n    onKeyUp(e){\r\n        switch(e.keyCode){\r\n            case cc.macro.KEY.left:\r\n                this.accLeft = false;\r\n                break;\r\n            case cc.macro.KEY.right:\r\n                this.accRight = false;\r\n                break;\r\n        }\r\n    },\r\n\r\n    onLoad () {\r\n        // 1、角色默认动作 - 上下横跳\r\n        this.jumpAction = this.setJumpAction();\r\n        this.node.runAction(this.jumpAction);\r\n\r\n        // 2、加速度方向的开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n\r\n        // 3、当前水平方向的速度\r\n        this.xSpeed = 0;\r\n\r\n        // 4、挂载键盘事件\r\n        cc.systemEvent.on(\r\n            cc.SystemEvent.EventType.KEY_DOWN,\r\n            this.onKeyDown,\r\n            this\r\n        );\r\n        cc.systemEvent.on(\r\n            cc.SystemEvent.EventType.KEY_UP,\r\n            this.onKeyUp,\r\n            this\r\n        )\r\n    },\r\n\r\n    // 视图渲染的每一帧，将会执行一次update\r\n    update (dt) {\r\n        // 1、根据两个开关，来计算当前的x方向的加速度\r\n        if(this.accLeft){\r\n            this.xSpeed -= this.accel * dt;\r\n        }else if(this.accRight){\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n\r\n        // 2、判断加速度是否超出最大加速度，超出则限制\r\n        if(Math.abs(this.xSpeed) > this.maxMoveSpeed){\r\n            // 求正负号\r\n            let temp = this.xSpeed/Math.abs(this.xSpeed);\r\n            // 限制xSpeed为最大值\r\n            this.xSpeed = this.maxMoveSpeed * temp;\r\n        }\r\n\r\n        // 3、设置节点位移\r\n        this.node.x = this.calcLeftRight(this.node.x , this.xSpeed * dt);\r\n    },\r\n    // 检测左右坐标，来限制最小和最大的左右位移\r\n    calcLeftRight(x,translate){\r\n        let temp = x + translate;\r\n        let {\r\n            maxBackLeftWall,\r\n            maxBackRightWall\r\n        } = this;\r\n        if(temp < 0 && Math.abs(temp) > Math.abs(maxBackLeftWall) ){\r\n            this.xSpeed = 0;\r\n            return maxBackLeftWall\r\n        }\r\n        if(temp > 0 && Math.abs(temp) > Math.abs(maxBackRightWall) ){\r\n            this.xSpeed = 0;\r\n            return maxBackRightWall\r\n        }\r\n        return temp;\r\n    },\r\n\r\n\r\n    onDestroy(){\r\n        // 组件销毁时，将绑定的键盘事件解绑\r\n        cc.systemEvent.off(\r\n            cc.SystemEvent.EventType.KEY_DOWN,\r\n            this.onKeyDown,\r\n            this\r\n        );\r\n        cc.systemEvent.off(\r\n            cc.SystemEvent.EventType.KEY_UP,\r\n            this.onKeyUp,\r\n            this\r\n        )\r\n    },\r\n\r\n    // update (dt) {},\r\n});\r\n"]}